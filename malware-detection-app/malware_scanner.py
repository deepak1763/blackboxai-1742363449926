import os
import magic
import hashlib

# Simulated malware signatures (in a real app, this would be a comprehensive database)
MALWARE_SIGNATURES = {
    'malware_signature_1': '2d5d0b45f6c3a17b54d6', # Example hash
    'suspicious_pattern': 'virus',
    'malicious_keyword': 'malware'
}

def get_file_type(file_path):
    """Determine file type using python-magic"""
    try:
        return magic.from_file(file_path, mime=True)
    except Exception:
        return "unknown/unknown"

def calculate_file_hash(file_path):
    """Calculate SHA-256 hash of file"""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_file_content(file_path):
    """Check file content for suspicious patterns"""
    suspicious_patterns = []
    try:
        with open(file_path, 'rb') as f:
            content = f.read().decode('utf-8', errors='ignore').lower()
            
            # Check for suspicious keywords
            for pattern in ['malware', 'virus', 'trojan', 'worm']:
                if pattern in content:
                    suspicious_patterns.append(f"Contains suspicious keyword: {pattern}")
            
            # Check for suspicious patterns (simplified example)
            if "system32" in content and "delete" in content:
                suspicious_patterns.append("Contains potential system manipulation code")
            
            if "network.connect" in content and "hidden" in content:
                suspicious_patterns.append("Contains potential suspicious network activity")
                
    except Exception as e:
        suspicious_patterns.append(f"Error reading file content: {str(e)}")
    
    return suspicious_patterns

def scan_file(file_path):
    """
    Main scanning function that analyzes a file for potential malware
    Returns a dictionary with scan results
    """
    if not os.path.exists(file_path):
        return {
            'status': 'error',
            'message': 'File not found',
            'details': {}
        }

    try:
        # Get basic file information
        file_size = os.path.getsize(file_path)
        file_type = get_file_type(file_path)
        file_hash = calculate_file_hash(file_path)
        
        # Scan results
        scan_details = {
            'file_size': file_size,
            'file_type': file_type,
            'file_hash': file_hash,
            'threats_found': [],
            'risk_level': 'low'
        }
        
        # Check file hash against known malware signatures
        if file_hash in MALWARE_SIGNATURES.values():
            scan_details['threats_found'].append('Matched known malware signature')
            scan_details['risk_level'] = 'high'
        
        # Check file content
        suspicious_patterns = check_file_content(file_path)
        if suspicious_patterns:
            scan_details['threats_found'].extend(suspicious_patterns)
            scan_details['risk_level'] = 'medium' if scan_details['risk_level'] == 'low' else 'high'
        
        # Determine final status
        status = 'clean' if not scan_details['threats_found'] else 'infected'
        message = 'No threats detected' if status == 'clean' else 'Potential threats detected'
        
        return {
            'status': status,
            'message': message,
            'details': scan_details
        }

    except Exception as e:
        return {
            'status': 'error',
            'message': f'Scan failed: {str(e)}',
            'details': {}
        }
