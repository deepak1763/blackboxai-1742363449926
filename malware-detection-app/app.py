import os
import json
from datetime import datetime
from flask import Flask, render_template, request, jsonify
from werkzeug.utils import secure_filename
from malware_scanner import scan_file

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB max file size
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['HISTORY_FILE'] = 'scan_history.json'

ALLOWED_EXTENSIONS = {'txt', 'doc', 'docx', 'pdf', 'exe'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def init_upload_folder():
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])

def load_scan_history():
    if os.path.exists(app.config['HISTORY_FILE']):
        with open(app.config['HISTORY_FILE'], 'r') as f:
            return json.load(f)
    return []

def save_scan_history(history):
    with open(app.config['HISTORY_FILE'], 'w') as f:
        json.dump(history, f, indent=2)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
    
    if not allowed_file(file.filename):
        return jsonify({'error': 'File type not allowed'}), 400

    try:
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        # Scan the file
        scan_result = scan_file(filepath)
        
        # Record scan in history
        history = load_scan_history()
        history.append({
            'filename': filename,
            'timestamp': datetime.now().isoformat(),
            'result': scan_result
        })
        save_scan_history(history)

        # Clean up uploaded file
        os.remove(filepath)

        return jsonify(scan_result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/history')
def history():
    scan_history = load_scan_history()
    return render_template('history.html', history=scan_history)

if __name__ == '__main__':
    init_upload_folder()
    app.run(host='0.0.0.0', port=8000, debug=True)
